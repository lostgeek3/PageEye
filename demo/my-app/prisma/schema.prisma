// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_DATABASE_URL")
}

enum Role {
  Client
  Admin
}

model User {
  id        BigInt  @id @default(autoincrement())
  username  String  @unique
  nickname  String
  avatar    String  @db.LongText
  tel       String
  email     String
  available Boolean @default(true)
  role      Role    @default(Client)

  userSetting   UserSetting @relation(fields: [userSettingId], references: [id])
  userSettingId BigInt      @unique

  watchers Watcher[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  loginAt   DateTime @default(now())
}

model UserAuth {
  id       BigInt @id @default(autoincrement())
  password String

  userId BigInt @unique
}

enum Language {
  Chinese
  English
}

enum WatchInterval {
  OneSecond
  OneMinute
  OneHour
  OneDay
}

enum LogInterval {
  OneMinute
  OneHour
  OneDay
  OneWeek
  OneMonth
}

model UserSetting {
  id                   BigInt        @id @default(autoincrement())
  darkMode             Boolean       @default(false)
  language             Language      @default(Chinese)
  defaultWatchInterval WatchInterval @default(OneMinute)
  defaultLogInterval   LogInterval   @default(OneDay)
  defaultUrlHeader     String        @default("http://")

  user User?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum WatcherState {
  Created
  Active
  Stopped
  Paused
  Failed
  Completed
}

model Watcher {
  id            BigInt        @id @default(autoincrement())
  name          String
  url           String
  element       String?       @db.Text
  state         WatcherState  @default(Created)
  watchInterval WatchInterval @default(OneMinute)
  logInterval   LogInterval   @default(OneDay)
  available     Boolean       @default(true)

  email           String?
  tel             String?
  useEmailService Boolean @default(true)
  useSmsService   Boolean @default(true)

  user   User   @relation(fields: [userId], references: [id])
  userId BigInt

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model WatcherData {
  id      BigInt @id @default(autoincrement())
  content String @db.LongText

  watcherId BigInt

  createdAt DateTime @default(now())
}

enum NotificationServiceState {
  Created
  Sent
  Failed
  Timeout
}

model EmailServiceHistory {
  id        BigInt                   @id @default(autoincrement())
  userId    BigInt
  watcherId BigInt
  subject   String
  title     String
  body      String
  state     NotificationServiceState @default(Created)

  sentAt DateTime @default(now())
}

model SmsServiceHistory {
  id        BigInt                   @id @default(autoincrement())
  userId    BigInt
  watcherId BigInt
  message   String
  state     NotificationServiceState @default(Created)

  sentAt DateTime @default(now())
}
